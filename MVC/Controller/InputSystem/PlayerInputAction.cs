//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/_Script/MVC/Controller/InputSystem/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""8d5bd57c-9b50-40a6-b6b4-f4040f4bd6c6"",
            ""actions"": [
                {
                    ""name"": ""WalkForward"",
                    ""type"": ""Button"",
                    ""id"": ""1e473539-4cfb-4208-914e-cb822c07b09e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkBack"",
                    ""type"": ""Button"",
                    ""id"": ""98c42f1a-e409-4a3f-bacc-1a174c00f8aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkRight"",
                    ""type"": ""Button"",
                    ""id"": ""ae352258-7b8c-4ba8-8dae-9c39b2a80df3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ce4ec20c-4dd0-4d58-a977-6299c409c46d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameMoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d8a45760-7bd0-4fe1-96f5-bf6e0575ecca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39944959-82a7-4497-bcfe-786609d2fe0c"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""515b5884-2c23-404a-ab00-287e8c746686"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab443615-aa81-4dc7-9232-85252d8cde3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb3bde7-13d9-4730-8d25-f313ed17f7c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dee80f3-7813-4b5d-8057-67f2bbd2abd9"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46514673-2c3b-4c64-ab0c-2bb0346c3237"",
                    ""path"": ""<XInputController>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_WalkForward = m_PlayerAction.FindAction("WalkForward", throwIfNotFound: true);
        m_PlayerAction_WalkBack = m_PlayerAction.FindAction("WalkBack", throwIfNotFound: true);
        m_PlayerAction_WalkRight = m_PlayerAction.FindAction("WalkRight", throwIfNotFound: true);
        m_PlayerAction_WalkLeft = m_PlayerAction.FindAction("WalkLeft", throwIfNotFound: true);
        m_PlayerAction_CameMoveLeft = m_PlayerAction.FindAction("CameMoveLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private IPlayerActionActions m_PlayerActionActionsCallbackInterface;
    private readonly InputAction m_PlayerAction_WalkForward;
    private readonly InputAction m_PlayerAction_WalkBack;
    private readonly InputAction m_PlayerAction_WalkRight;
    private readonly InputAction m_PlayerAction_WalkLeft;
    private readonly InputAction m_PlayerAction_CameMoveLeft;
    public struct PlayerActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @WalkForward => m_Wrapper.m_PlayerAction_WalkForward;
        public InputAction @WalkBack => m_Wrapper.m_PlayerAction_WalkBack;
        public InputAction @WalkRight => m_Wrapper.m_PlayerAction_WalkRight;
        public InputAction @WalkLeft => m_Wrapper.m_PlayerAction_WalkLeft;
        public InputAction @CameMoveLeft => m_Wrapper.m_PlayerAction_CameMoveLeft;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterface != null)
            {
                @WalkForward.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkForward;
                @WalkForward.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkForward;
                @WalkForward.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkForward;
                @WalkBack.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkBack;
                @WalkBack.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkBack;
                @WalkBack.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkBack;
                @WalkRight.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkRight;
                @WalkRight.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkRight;
                @WalkRight.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkRight;
                @WalkLeft.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkLeft;
                @WalkLeft.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkLeft;
                @WalkLeft.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWalkLeft;
                @CameMoveLeft.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCameMoveLeft;
                @CameMoveLeft.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCameMoveLeft;
                @CameMoveLeft.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCameMoveLeft;
            }
            m_Wrapper.m_PlayerActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WalkForward.started += instance.OnWalkForward;
                @WalkForward.performed += instance.OnWalkForward;
                @WalkForward.canceled += instance.OnWalkForward;
                @WalkBack.started += instance.OnWalkBack;
                @WalkBack.performed += instance.OnWalkBack;
                @WalkBack.canceled += instance.OnWalkBack;
                @WalkRight.started += instance.OnWalkRight;
                @WalkRight.performed += instance.OnWalkRight;
                @WalkRight.canceled += instance.OnWalkRight;
                @WalkLeft.started += instance.OnWalkLeft;
                @WalkLeft.performed += instance.OnWalkLeft;
                @WalkLeft.canceled += instance.OnWalkLeft;
                @CameMoveLeft.started += instance.OnCameMoveLeft;
                @CameMoveLeft.performed += instance.OnCameMoveLeft;
                @CameMoveLeft.canceled += instance.OnCameMoveLeft;
            }
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);
    public interface IPlayerActionActions
    {
        void OnWalkForward(InputAction.CallbackContext context);
        void OnWalkBack(InputAction.CallbackContext context);
        void OnWalkRight(InputAction.CallbackContext context);
        void OnWalkLeft(InputAction.CallbackContext context);
        void OnCameMoveLeft(InputAction.CallbackContext context);
    }
}
